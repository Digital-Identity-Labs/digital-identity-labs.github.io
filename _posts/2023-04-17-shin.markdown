---
layout: post
title: "Shin 0.2.0 - metadata, attributes, and SAML assertions"
date: 2023-04-17 09:30:00
categories: software
header_image: shin.png
author: Pete Birkinshaw
---
[Shin](https://github.com/Digital-Identity-Labs/shin) is an Elixir client for the Shibboleth IdP admin API. 

The Shibboleth IdP has a variety of admin APIs that are often overlooked. For many administrators the only time they
access the admin APIs is when using some of the tools bundled with the IdP, such as `aacli` or `mdquery`, which can
sometimes be fiddly to use even on the same server as the IdP. Shin aims to offer the same functionality as the
bundled admin scripts but as a full Elixir library suitable for use in scripts and web services.

The first release of Shin, last year, included functions for dealing with server metrics and reloading individual 
sub-services. This new release adds many new features: metadata queries and reloads, service status, attribute release
queries and fetching simulated SAML assertions.

Shin is an Elixir package, available from [Hex.pm](https://hex.pm/packages/shin) with documentation online at 
  [HexDocs.pm](https://hexdocs.pm/shin/readme.html). You can see 
  [the Shin sourcecode at Github](https://github.com/Digital-Identity-Labs/shin). 

We've included a simple Livebook so you can easily try Shin with your own Shibboleth IdP:

[![Run in Livebook](https://livebook.dev/badge/v1/blue.svg)](https://livebook.dev/run?url=https%3A%2F%2Fraw.githubusercontent.com%2FDigital-Identity-Labs%2Fshin%2Fmain%2Fshin_notebook.livemd)

(You can [get Livebook here](https://livebook.dev/#install))

## A Few Examples

### Listing a user's attribute data released to an SP

```elixir
{:ok, attr_data} = Shin.attributes(idp, "https://test.ukfederation.org.uk/entity", "pete")
Shin.Attributes.values(attr_data, "eduPersonEntitlement")
# => ["urn:mace:dir:entitlement:common-lib-terms"]
Shin.Attributes.names(attr_data)
#=> ["eduPersonEntitlement", "eduPersonPrincipalName", "eduPersonScopedAffiliation",
# "eduPersonUniqueID", "o"]
```

### Viewing a simulated SAML2 assertion containing user attributes

```elixir
{:ok, saml_assertion_xml} = Shin.assertion(idp, "https://test.ukfederation.org.uk/entity", "pete")
```

### Fetching an SP's metadata

```elixir
{:ok, metadata_xml} = Shin.metadata(idp, "https://test.ukfederation.org.uk/entity")
```
